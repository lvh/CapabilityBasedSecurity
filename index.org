#+Title: Capability-based Security
#+Author: @lvh
#+Email: _@lvh.io

#+OPTIONS: toc:nil reveal_rolling_links:nil num:nil reveal_history:true
#+REVEAL_TRANS: linear
#+REVEAL_THEME: lvh

* Slides

  ~https://www.lvh.io/CapabilityBasedSecurity~

* Introduction

** Who am I?

   #+BEGIN_HTML
   <img style="width:70%" src="./media/lvh.svg">
   #+END_HTML

** ã€€

   #+ATTR_HTML: :style width:80%
   [[./media/RMSLogoWithTextmarkLight.png]]

** Talks in most of the world

   #+BEGIN_HTML
   <img style="width:40%" src="./media/Serious.svg">
   #+END_HTML

** Talks in Poland

   #+BEGIN_HTML
   <img style="width:70%" src="./media/MadScientist.svg">
   #+END_HTML

** This talk

   #+BEGIN_HTML
   <img style="width:70%" src="./media/MadScientist.svg">
   #+END_HTML

** This talk

   * Turning stuff inside out
   * All of the hobby horses
     * Information security!
     * Cryptography!
     * Distributed systems!

* Auth________â€Œn

** ã€€

   #+BEGIN_HTML
   <img style="width:60%" src="./media/Octocat.svg">
   #+END_HTML

** Access a repo

   ~https://github.com/RackSec/secret~

   1. GitHub figures out who you are
   2. GitHub checks if you should have access

** Pattern

   1. Authentication /f: creds â†¦ ident/
   2. Authorization /f: ident â†¦ access/

** What's wrong with that?

   Two issues we'll discuss:

   * Fails open
   * Imprecise

** Failure mode

   * Legitimate user can't access (fail close)
   * /Illegitimate user can access (fail open)/

*** Failing open â‡’ fragile

    #+ATTR_REVEAL: :frag (roll-in)
    * Code execution â‰¡ game over
    * Common:
      * ~pickle~
      * Weird machines
      * ...

*** Not very exciting

    * Sure, running Python â‰¡ running Python
    * Does it have to work this way?

** Imprecise authorization

*** Waffle.io

   #+BEGIN_HTML
   <img style="width:100%" src="./media/WaffleIo.png">
   #+END_HTML

*** OAuth authorization flow

   #+BEGIN_HTML
   <img style="width:90%" src="./media/WaffleIoAuthorization.png">
   #+END_HTML

*** What does "repositories" mean?

   #+BEGIN_HTML
   <img style="width:80%" src="./media/WaffleIoAuthorizatonDetails.png">
   #+END_HTML

*** Not GitHub/Waffle.io's fault

    OAuth's ~scope~ parameter encourages this

*** AutoScale

   * Manages groups of servers
   * Scale up and down easily

*** Scale on behalf of customers

    * Should work as if user did it directly
    * Billing, audit logs, limits...

*** As if the user did it themselves

    #+ATTR_REVEAL: :frag (roll-in)
    * Easiest solution?
      * Impersonate them!
    * How do I impersonate a user?
      * Admin credentials (of course!)

*** â˜¢ â˜¢ â˜¢ â˜¢ â˜¢

    [[./media/MarieSklodowska.jpg]]

*** Yay admin credentials

    * Accidentally commit to (public!) repo?
    * On development machine for staging runs?

    A lot of people want those magic keys!

*** â˜  THREAT LEVEL: MOSSAD â˜ 

    That's it, we're screwed

    We are going to be Mossad'ed upon

    #+BEGIN_HTML
    <img style="width:80%" src="./media/MossadedUpon.png">
    #+END_HTML

*** â˜  THREAT LEVEL: MOSSAD â˜ 

    #+BEGIN_HTML
    <img style="width:13%" src="./media/FBI.svg">
    <img style="width:13%" src="./media/PLA.svg">

    <br>

    <img style="width:13%" src="./media/Mossad.svg">
    <img style="width:18%" src="./media/lvh.svg">
    <img style="width:13%" src="./media/CIA.svg">

    <br>

    <img style="width:13%" src="./media/NSA.svg">
    <img style="width:13%" src="./media/Putin.jpg">
    #+END_HTML

    #+BEGIN_NOTES
    Literally my only hope is that the FBI, CIA, PLA, Mossad, ISIS,
    Mafia, Russian mob, Illuminati, lizard people, accidentally kill
    each other before they get to me!
    #+END_NOTES

* Pies in the sky

    #+BEGIN_HTML
    <img style="width:30%" src="./media/Pies.svg">
    #+END_HTML

** What do I want?

    #+ATTR_REVEAL: :frag (roll-in)
    * API key per customer
    * Limited use (time, # of uses)
    * Trivial to rotate, revoke
    * With flavors: /{1, 2, 3}/
    * With images: /{A, B}/
    * /Only/ in data center Î±
    * /Only/ delete servers made this way

** Principle of least privilege

   "Don't give X more access than X needs"

*** Applied to real life

    If you owe someone 100 zÅ‚, do you:

    #+ATTR_REVEAL: :frag (roll-in)
    * give them a stÃ³wka/make a bank transfer?
    * give them your bank credentials?

** Principle of least privilege

   But our tools are imprecise!

   1. Authentication first class object
   2. Authorization flows from it

** Copernican revolution

   1. Authorization first class object
   2. (Authentication may flow from it)

** Capabilities

    #+ATTR_REVEAL: :frag (roll-in)
   * First-class object
   * Precise
     * Can be attenuated
   * Can be communicated
     * Might be contained
   * Can not be forged

     #+BEGIN_NOTES
     Can not be forged: strong crypto, hardware guarantees, kernel guarantees...
     #+END_NOTES

** Attenuation (a.k.a diminishing)

   * In: cap that can do {X, Y, Z}
   * Out: cap that can only do {X, Y}

** Object capabilities

   To use e.g. sockets, you need:

   * ~socket~ & ~os~ modules
   * Reference to a socket

*** OOP: making objects do stuff

    Control references to objects

    â‡“

    Control what code can do

** Can we fix access control?

    * Probably not; already a mess
    * Scales poorly with fine granularity

*** Dependently typed problem

    #+ATTR_REVEAL: :frag (roll-in)
    * Most systems express roles, classes
      * Create servers, delete servers
      * (That's broader than usual!)
    * That's still way too broad, I want:
      * Can create server with image /A/, &c
      * Can delete server made this way

*** Let's settle for ugly & imprecise

    #+ATTR_REVEAL: :frag (roll-in)
    * Roles are the path to the dark side
    * Roles lead to Active Directory
    * Active Directory leads to anger
    * Anger leads to hate
    * Hate leads to suffering

*** Finally, why would you /want/ that?

    Cryptography, not pinky swears

* How do we do that?

** "Easy" mode: local

   * Memory safe languages
     * ASLR-like, Erlang-like

** Crypto, not pinky swears

*** Tahoe-LAFS

   #+BEGIN_HTML
   <img style="width:100%" src="./media/TahoeLAFSCaps.svg">
   #+END_HTML

*** Icecap

   #+BEGIN_HTML
   <img style="width:100%" src="./media/IcecapCaps.svg">
   #+END_HTML

*** Icecap

   #+BEGIN_HTML
   <img style="width:50%" src="./media/IcecapDependencies.svg">
   #+END_HTML

* Why don't we do that already?

** Lots of alternatives

   * Classic privilege dropping
   * POSIX capabilities
     * ~CAP_NET_BIND_SERVICE~ &c
   * ~seccomp~, ~AppArmor~, ~SELinux~, ...
   * ~tame()~, ~securelevel~, ...
   * ...

*** Oh my, there are so many

    * That should probably tell you something
    * Mostly opt-in or de-facto opt-in

** We use caps already, sort-of

   * Webhooks (no confinement)
   * ~capsicum~ (kernel, no crypto)

*** Just not consistently

    How many of you:

    #+ATTR_REVEAL: :frag (roll-in)
    * ... have Python software running in production?
    * ... that can only access the resources it needs?
    * ... have used object-capability systems?
    * ... are running them in production now?

*** We've tried this

    * Programming languages: E, Cajaâ€¦
    * Operating systems: EROS, Coyotos, (se)L4â€¦
    * Other systems: Tahoe-LAFSâ€¦

*** Really great features, e.g. in E

    * Secure (crypto, not pinky swears)
    * Persistent
    * Distributed (a la Erlang)
    * Deadlock free

*** It didn't pan out

    Has /anyone/ heard of any of these systems?

*** Why didn't it pan out?

    (Reality is complex, I'm simplifying, theorizing)

    * Backwards compatibility is pretty great
      * Nobody wants to re-write their project
    * Security often not a priority
      * (see Building Secure Systems, PyCon 2015)

** How can we do better?

   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX
   UX UX UX UX UX UX UX UX

*** Seriously crypto people

    (Yes, this includes me)

    * Most programmers know not to do crypto
    * But cryptographers still do UX... poorly

*** Cooperation & diversity FTW

    * Different expertise
    * More points of view
    * More experiences

* Wrap-up

** Thanks, everyone!

   * Everyone for putting up with my rant
   * PyCon PL organizers for inviting me ðŸ’–

** Questions?

* Slides

  ~https://www.lvh.io/CapabilityBasedSecurity~
